"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const userStyles_1 = __importDefault(require("./userStyles"));
function buttons(options, theme, addBase, colors) {
    const components = {};
    const { buttons, globalStyles } = options;
    const userGlobalStyles = (0, userStyles_1.default)(theme, globalStyles);
    const userButtonBaseStyles = (0, userStyles_1.default)(theme, buttons === null || buttons === void 0 ? void 0 : buttons.baseStyles);
    const presets = {
        elegant: {
            borderRadius: theme(`borderRadius[none]`),
            fontWeight: theme(`fontWeight[light]`),
            textTransform: 'uppercase',
            borderWidth: '1px',
        },
        playful: {
            borderRadius: theme(`borderRadius[full]`),
            fontWeight: theme(`fontWeight[semibold]`),
            textTransform: 'normal-case',
        },
    };
    let preset = {
        borderRadius: '8px',
        fontWeight: 400,
    };
    if ((buttons === null || buttons === void 0 ? void 0 : buttons.preset) && presets[buttons === null || buttons === void 0 ? void 0 : buttons.preset]) {
        preset = presets[buttons === null || buttons === void 0 ? void 0 : buttons.preset];
    }
    const buttonBaseStyles = Object.assign(Object.assign(Object.assign({ fontSize: '1rem', padding: '8px 24px', borderWidth: '1px', borderColor: 'transparent', userSelect: 'none', outline: '2px solid transparent', outlineOffset: '2px', '&:disabled': {
            cursor: 'not-allowed',
        }, transitionProperty: theme(`transitionProperty[all]`), transitionDuration: theme(`transitionDuration[200]`), transitionTimingFunction: theme(`transitionTimingFunction['ease-in-out']`), display: 'flex', alignItems: 'center', justifyContent: 'center', gap: '8px' }, preset), userGlobalStyles), userButtonBaseStyles);
    if (buttons === null || buttons === void 0 ? void 0 : buttons.animate) {
        addBase({
            '@keyframes push': {
                from: {
                    transform: 'translateY(0%)',
                },
                to: {
                    transform: 'translateY(5%)',
                },
            },
        });
        buttonBaseStyles['&:active'] = {
            animation: 'push 0.09s ease-in-out',
        };
    }
    colors.forEach((color) => {
        components[`.btn-${color}-fill`] = Object.assign(Object.assign({}, buttonBaseStyles), { backgroundColor: theme(`colors.${color}[700]`), color: theme(`colors.white`), '&:not(:disabled):hover': {
                backgroundColor: theme(`colors.${color}[900]`),
            }, '&:focus': {
                backgroundColor: theme(`colors.${color}[700]`),
                boxShadow: `0 0 0 4px ${theme(`colors.${color}[300]`)}`,
            }, '&:disabled': Object.assign(Object.assign({}, buttonBaseStyles['&:disabled']), { color: theme(`colors.gray[300]`), backgroundColor: theme(`colors.gray[400]`) }) });
        components[`.btn-${color}-outline`] = Object.assign(Object.assign({}, buttonBaseStyles), { borderColor: theme(`colors.gray[300]`), color: theme(`colors.gray[900]`), '&:not(:disabled):not(:focus):hover': {
                borderColor: theme(`colors.gray[400]`),
            }, '&:focus': {
                borderColor: 'transparent',
                boxShadow: `0 0 0 4px ${theme(`colors.${color}[300]`)}`,
            }, '&:disabled': Object.assign(Object.assign({}, buttonBaseStyles['&:disabled']), { color: theme(`colors.neutral[600]`), borderColor: theme(`colors.neutral[200]`) }) });
    });
    return components;
}
exports.default = buttons;
