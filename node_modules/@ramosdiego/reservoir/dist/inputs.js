"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const userStyles_1 = __importDefault(require("./userStyles"));
function inputs(options, theme, colors) {
    const components = {};
    const { inputs, globalStyles } = options;
    const userGlobalStyles = (0, userStyles_1.default)(theme, globalStyles);
    const userInputsBaseStyles = (0, userStyles_1.default)(theme, inputs === null || inputs === void 0 ? void 0 : inputs.baseStyles);
    const inputBaseStyles = Object.assign(Object.assign({ padding: '8px 24px', backgroundColor: '#FFF', '&:autofill': {
            backgroundColor: '#FFF',
        }, outline: '2px solid transparent', outlineOffset: '2px', '&:disabled': {
            cursor: 'not-allowed',
        }, transitionProperty: theme(`transitionProperty[all]`), transitionDuration: theme(`transitionDuration[200]`), transitionTimingFunction: theme(`transitionTimingFunction['ease-in-out']`) }, userGlobalStyles), userInputsBaseStyles);
    const inputOutlineStyles = Object.assign(Object.assign({}, inputBaseStyles), { borderWidth: '1px', borderRadius: '8px' });
    colors.forEach((color) => {
        components[`.input-${color}-outline`] = Object.assign(Object.assign({}, inputOutlineStyles), { borderColor: '#D1D5DB', '&:focus': {
                borderColor: 'transparent',
                boxShadow: `0 0 0 4px ${theme(`colors.${color}[300]`)}`,
            } });
        components[`.input-${color}-outline-dark`] = Object.assign(Object.assign({}, inputOutlineStyles), { borderColor: theme(`colors.neutral[700]`), caretColor: theme(`colors.${color}[300]`), '&:disabled': Object.assign(Object.assign({}, inputOutlineStyles['&:disabled']), { borderColor: theme(`colors.neutral[600]`) }), '&:focus': {
                borderColor: theme(`colors.${color}[500]`),
                boxShadow: `0 0 0 2px ${theme(`colors.${color}[700]`)}`,
            }, '&::-webkit-calendar-picker-indicator': {
                filter: 'invert(1)',
            } });
    });
    return components;
}
exports.default = inputs;
