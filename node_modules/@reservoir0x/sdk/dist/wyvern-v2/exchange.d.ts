import { Signer } from "@ethersproject/abstract-signer";
import { BigNumberish } from "@ethersproject/bignumber";
import { ContractTransaction } from "@ethersproject/contracts";
import { Order } from "./order";
declare type TxData = {
    from: string;
    to: string;
    data: string;
    value?: BigNumberish;
};
/**
 * The Exchange interface provides partial functionality to interact with the Wyvern Exchange Ethereum Smart Contract.
 */
export declare class Exchange {
    /**
     * The chain ID for the Ethereum network to be used. For example, 1 for Ethereum Mainnet and 4 for Rinkeby Testnet.
     */
    chainId: number;
    /**
     *
     * @param chainId The chain ID for the Ethereum network to be used. For example, 1 for Ethereum Mainnet and 4 for Rinkeby Testnet.
     */
    constructor(chainId: number);
    matchTransaction(taker: string, buyOrder: Order, sellOrder: Order): TxData;
    /**
     * Execute a Wyvern v2 order match
     * @param taker Abstracted Ethereum Account, usually as a JsonRpcSigner
     * @param buyOrder Wyvern v2 buy order
     * @param sellOrder Wyvern v2 buy order
     * @returns The Wyvern v2 contract transaction
     */
    match(taker: Signer, buyOrder: Order, sellOrder: Order): Promise<ContractTransaction>;
    cancelTransaction(maker: string, order: Order): TxData;
    /**
     * Cancel a Wyvern v2 order
     * @param maker Abstracted Ethereum Account, usually as a JsonRpcSigner
     * @param order Wyvern v2 order to be cancelled
     * @returns The contract transaction
     */
    cancel(maker: Signer, order: Order): Promise<ContractTransaction>;
}
export {};
//# sourceMappingURL=exchange.d.ts.map