"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenListErc721Builder = void 0;
const abi_1 = require("@ethersproject/abi");
const constants_1 = require("@ethersproject/constants");
const utils_1 = require("./utils");
const base_1 = require("../base");
const Addresses = __importStar(require("../../addresses"));
const order_1 = require("../../order");
const Types = __importStar(require("../../types"));
const utils_2 = require("../../../utils");
const TokenListVerifier_json_1 = __importDefault(require("../../abis/TokenListVerifier.json"));
const Erc721_json_1 = __importDefault(require("../../../common/abis/Erc721.json"));
// Wyvern V2 calldata:
// `transferFrom(address from, address to, uint256 tokenId)`
const REPLACEMENT_PATTERN_BUY = (numTokens) => {
    const numMerkleTreeLevels = Math.ceil(Math.log2(numTokens));
    return (
    // "transferFrom" 4byte signature
    "0x00000000" +
        // "from" field
        "f".repeat(64) +
        // "to" field
        "0".repeat(64) +
        // "tokenId" field
        "f".repeat(64) +
        // merkle root
        "0".repeat(64) +
        // merkle proof
        "0".repeat(128) +
        "f".repeat(64).repeat(numMerkleTreeLevels));
};
const REPLACEMENT_PATTERN_SELL = (numTokens) => {
    const numMerkleTreeLevels = Math.ceil(Math.log2(numTokens));
    return (
    // "transferFrom" 4byte signature
    "0x00000000" +
        // "from" field
        "0".repeat(64) +
        // "to" field
        "f".repeat(64) +
        // "tokenId" field
        "0".repeat(64) +
        // merkle root
        "f".repeat(64) +
        // merkle proof
        "0".repeat(128) +
        "0".repeat(64).repeat(numMerkleTreeLevels));
};
class TokenListErc721Builder extends base_1.BaseBuilder {
    constructor(chainId) {
        super(chainId);
        this.buildMatching = (order, taker, tokenId, tokenIds) => {
            const merkleRoot = this.getMerkleRoot(order);
            if (!merkleRoot) {
                throw new Error("Invalid order");
            }
            const numMerkleTreeLevels = Math.ceil(Math.log2(tokenIds.length));
            const merkleTree = (0, utils_1.generateMerkleTree)(tokenIds);
            if (merkleTree.getHexRoot() !== merkleRoot) {
                throw new Error("Token ids not matching merkle root");
            }
            const merkleProof = (0, utils_1.generateMerkleProof)(merkleTree, tokenId)
                .map((proof) => proof.slice(2))
                .join("");
            if (order.params.side === Types.OrderSide.BUY) {
                const calldata = new abi_1.Interface(Erc721_json_1.default).encodeFunctionData("transferFrom", [
                    taker,
                    constants_1.AddressZero,
                    tokenId,
                ]) +
                    // merkle root
                    "0".repeat(64) +
                    // merkle proof
                    abi_1.defaultAbiCoder.encode(["uint256"], [64]).slice(2) +
                    abi_1.defaultAbiCoder.encode(["uint256"], [numMerkleTreeLevels]).slice(2) +
                    merkleProof;
                return new order_1.Order(this.chainId, {
                    kind: "erc721-token-list",
                    exchange: Addresses.Exchange[this.chainId],
                    maker: taker,
                    taker: constants_1.AddressZero,
                    makerRelayerFee: 0,
                    takerRelayerFee: order.params.takerRelayerFee,
                    feeRecipient: constants_1.AddressZero,
                    side: Types.OrderSide.SELL,
                    saleKind: Types.OrderSaleKind.FIXED_PRICE,
                    target: order.params.target,
                    howToCall: Types.OrderHowToCall.CALL,
                    calldata,
                    replacementPattern: REPLACEMENT_PATTERN_SELL(tokenIds.length),
                    staticTarget: constants_1.AddressZero,
                    staticExtradata: "0x",
                    paymentToken: order.params.paymentToken,
                    basePrice: (0, utils_2.s)(order.params.basePrice),
                    extra: "0",
                    listingTime: (0, utils_2.getCurrentTimestamp)(-60),
                    expirationTime: 0,
                    salt: (0, utils_2.s)((0, utils_2.getRandomBytes32)()),
                });
            }
            else if (order.params.side === Types.OrderSide.SELL) {
                throw new Error("Unsupported order side");
            }
            else {
                throw new Error("Invalid order side");
            }
        };
    }
    getMerkleRoot(order) {
        try {
            const [merkleRoot] = abi_1.defaultAbiCoder.decode(["bytes32"], "0x" + order.params.calldata.slice(2).substr(200, 64));
            return merkleRoot;
        }
        catch {
            return undefined;
        }
    }
    isValid(order) {
        const merkleRoot = this.getMerkleRoot(order);
        if (!merkleRoot) {
            return false;
        }
        try {
            const copyOrder = this.build({
                ...order.params,
                contract: order.params.target,
                tokenIds: [0],
                side: order.params.side === Types.OrderSide.BUY ? "buy" : "sell",
                price: order.params.basePrice,
                fee: 0,
            });
            copyOrder.params.calldata =
                "0x" +
                    copyOrder.params.calldata.slice(2).substr(0, 200) +
                    order.params.calldata.slice(2).slice(200);
            copyOrder.params.replacementPattern =
                "0x" +
                    copyOrder.params.replacementPattern.slice(2).substr(0, 392) +
                    order.params.replacementPattern.slice(2).slice(392);
            copyOrder.params.staticExtradata =
                "0x" +
                    copyOrder.params.staticExtradata.slice(2).substr(0, 74) +
                    order.params.staticExtradata.slice(2).substr(74);
            if (!copyOrder) {
                return false;
            }
            copyOrder.params.taker = order.params.taker;
            copyOrder.params.makerRelayerFee = order.params.makerRelayerFee;
            copyOrder.params.takerRelayerFee = order.params.takerRelayerFee;
            if (copyOrder.hash() !== order.hash()) {
                return false;
            }
        }
        catch {
            return false;
        }
        return true;
    }
    build(params) {
        this.defaultInitialize(params);
        if (params.side === "buy") {
            const numMerkleTreeLevels = Math.ceil(Math.log2(params.tokenIds.length));
            const merkleTree = (0, utils_1.generateMerkleTree)(params.tokenIds);
            const calldata = new abi_1.Interface(Erc721_json_1.default).encodeFunctionData("transferFrom", [
                constants_1.AddressZero,
                params.maker,
                0,
            ]) +
                // merkle root
                merkleTree.getHexRoot().slice(2) +
                // merkle proof
                abi_1.defaultAbiCoder.encode(["uint256"], [64]).slice(2) +
                abi_1.defaultAbiCoder.encode(["uint256"], [numMerkleTreeLevels]).slice(2) +
                "0".repeat(64).repeat(numMerkleTreeLevels);
            const staticExtradata = new abi_1.Interface(TokenListVerifier_json_1.default).getSighash("verifyErc721") +
                abi_1.defaultAbiCoder.encode(["uint256"], [32]).slice(2) +
                abi_1.defaultAbiCoder
                    .encode(["uint256"], [calldata.slice(2).length / 2])
                    .slice(2);
            return new order_1.Order(this.chainId, {
                kind: "erc721-token-list",
                exchange: Addresses.Exchange[this.chainId],
                maker: params.maker,
                taker: constants_1.AddressZero,
                makerRelayerFee: 0,
                takerRelayerFee: params.fee,
                feeRecipient: params.feeRecipient,
                side: Types.OrderSide.BUY,
                // No dutch auctions support for now
                saleKind: Types.OrderSaleKind.FIXED_PRICE,
                target: params.contract,
                howToCall: Types.OrderHowToCall.CALL,
                calldata,
                replacementPattern: REPLACEMENT_PATTERN_BUY(params.tokenIds.length),
                staticTarget: Addresses.TokenListVerifier[this.chainId],
                staticExtradata,
                paymentToken: params.paymentToken,
                basePrice: (0, utils_2.s)(params.price),
                extra: "0",
                listingTime: params.listingTime,
                expirationTime: params.expirationTime,
                salt: (0, utils_2.s)(params.salt),
                v: params.v,
                r: params.r,
                s: params.s,
            });
        }
        else if (params.side === "sell") {
            throw new Error("Unsupported order side");
        }
        else {
            throw new Error("Invalid order side");
        }
    }
}
exports.TokenListErc721Builder = TokenListErc721Builder;
//# sourceMappingURL=erc721.js.map