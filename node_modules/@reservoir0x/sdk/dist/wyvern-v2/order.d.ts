import { Provider } from "@ethersproject/abstract-provider";
import { Signer } from "@ethersproject/abstract-signer";
import * as Types from "./types";
/**
 * The Wyvern v2 order interface provides functionality to interact with Project Wyvern Ethereum Smart Contracts and read data from the blockchain about order's current state.
 */
export declare class Order {
    /**
     * The chain ID for the Ethereum network to be used. For example, 1 for Ethereum Mainnet and 4 for Rinkeby Testnet.
     */
    chainId: number;
    /**
     * The order parameters obtained from an API or built locally.
     */
    params: Types.OrderParams;
    /**
     *
     * @param chainId The chain ID for the Ethereum network to be used. For example, 1 for Ethereum Mainnet and 4 for Rinkeby Testnet.
     * @param params The order parameters obtained from an API or built locally.
     */
    constructor(chainId: number, params: Types.OrderParams);
    /**
     *
     * @returns The order's keccak256 hash
     */
    hash(): string;
    /**
     *
     * @returns The order's EIP191 prefix hash
     */
    prefixHash(): string;
    /**
     * Sign the Wyvern v2 order
     * @param signer Abstracted Ethereum account, usually as a JsonRpcSigner
     */
    sign(signer: Signer): Promise<void>;
    /**
     * Build a matching buy order for a sell order and vice versa
     * @param taker The taker's Ethereum address
     * @param data Any aditional arguments
     * @returns The matching Wyvern v2 order
     */
    buildMatching(taker: string, data?: any[]): Order;
    /**
     * Check the validity of the order's signature
     */
    checkSignature(): void;
    /**
     * Check the order's validity
     */
    checkValidity(): void;
    /**
     * Check the order's fillability
     * @param provider A read-only abstraction to access the blockchain data
     */
    checkFillability(provider: Provider): Promise<void>;
    private getBuilder;
    private detectKind;
}
//# sourceMappingURL=order.d.ts.map