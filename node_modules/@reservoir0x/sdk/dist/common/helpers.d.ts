import { Provider, TransactionResponse } from "@ethersproject/abstract-provider";
import { Signer } from "@ethersproject/abstract-signer";
import { BigNumberish } from "@ethersproject/bignumber";
import { Contract } from "@ethersproject/contracts";
declare type TxData = {
    from: string;
    to: string;
    data: string;
    value?: BigNumberish;
};
/**
 * The Erc20 interface provides partial functionality to interact with an ERC20 Ethereum smart contract.
 */
export declare class Erc20 {
    contract: Contract;
    constructor(provider: Provider, address: string);
    /**
     * Sets amount as the allowance of spender over the callerâ€™s tokens.
     * @param approver Abstracted Ethereum Account, usually as a JsonRpcSigner
     * @param spender Ethereum address of a contract allowed to spend the approver's tokens
     * @param amount Token amount to be allowed to spend
     * @returns The contract transaction
     */
    approve(approver: Signer, spender: string, amount?: BigNumberish): Promise<TransactionResponse>;
    approveTransaction(approver: string, spender: string, amount?: BigNumberish): TxData;
    /**
     * @param owner The owner's Ethereum address
     * @returns The owner's token balance
     */
    getBalance(owner: string): Promise<BigNumberish>;
    /**
     * @param owner Ethereum address to be queried
     * @param spender Ethereum contract
     * @returns The remaining number of tokens that spender will be allowed to spend on behalf of owner through transferFrom.
     */
    getAllowance(owner: string, spender: string): Promise<BigNumberish>;
}
/**
 * The Erc721 interface provides partial functionality to interact with an ERC721 Ethereum smart contract.
 */
export declare class Erc721 {
    contract: Contract;
    constructor(provider: Provider, address: string);
    isValid(): Promise<boolean>;
    /**
     * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.
     * @param approver Abstracted Ethereum Account as a JavaScript object, usually a JsonRpcSigner
     * @param operator The operator's Ethereum address
     * @returns The contract transaction
     */
    approve(approver: Signer, operator: string): Promise<TransactionResponse>;
    approveTransaction(approver: string, operator: string): TxData;
    /**
     * Returns the owner of a token
     * @param tokenId The token ID number
     * @returns The token owner's Ethereum address
     */
    getOwner(tokenId: BigNumberish): Promise<string>;
    /**
     * Determine if the operator is allowed to manage all of the assets of owner or not
     * @param owner The owner's Ethereum address
     * @param operator The operator's Ethereum address
     * @returns Wether the operator is allowed to manage all of the assets of owner or not
     */
    isApproved(owner: string, operator: string): Promise<boolean>;
}
/**
 * The Erc1155 interface provides partial functionality to interact with an Erc1155 Ethereum smart contract.
 */
export declare class Erc1155 {
    contract: Contract;
    constructor(provider: Provider, address: string);
    isValid(): Promise<boolean>;
    /**
     * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.
     * @param approver Abstracted Ethereum Account, usually as a JsonRpcSigner
     * @param operator The operator's Ethereum address
     * @returns The contract transaction
     */
    approve(approver: Signer, operator: string): Promise<TransactionResponse>;
    approveTransaction(approver: string, operator: string): TxData;
    /**
     * @param owner The owner's Ethereum address
     * @param tokenId The token ID number
     * @returns The owner's token balance
     */
    getBalance(owner: string, tokenId: BigNumberish): Promise<BigNumberish>;
    /**
     * Determine if the operator is allowed to manage all of the assets of owner or not
     * @param owner The owner's Ethereum address
     * @param operator The operator's Ethereum address
     * @returns Wether the operator is allowed to manage all of the assets of owner or not
     */
    isApproved(owner: string, operator: string): Promise<boolean>;
}
/**
 * The Weth interface provides partial functionality to interact with the Wrapped ETH (WETH) Ethereum smart contract.
 */
export declare class Weth extends Erc20 {
    constructor(provider: Provider, chainId: number);
    /**
     * Deposit ETH in the WETH smart contract to get the equivalent amount of WETH
     * @param depositor Abstracted Ethereum account, usually as a JsonRpcSigner
     * @param amount ETH amount to be deposited in the WETH smart contract
     * @returns The contract transaction
     */
    deposit(depositor: Signer, amount: BigNumberish): Promise<TransactionResponse>;
    depositTransaction(depositor: string, amount: BigNumberish): TxData;
}
export {};
//# sourceMappingURL=helpers.d.ts.map